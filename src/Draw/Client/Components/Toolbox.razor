@implements IDisposable
@inject IGameService GameService

@if (toolsVisible)
{
    <div class="tools">
        <div class="horizontal">
            <BrushColorSelector />
            <div class="vertical">
                <CommandSelector />
                <BackgroundSelector />
                <BrushSizeSelector />
            </div>
        </div>
    </div>
}

@code {
    private bool toolsVisible = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        GameService.GameState.ActivePlayerDrawStarted += OnActivePlayerDrawStarted;
        GameService.GameState.PlayerDrawStarted += OnPlayerDrawStarted;
    }

    public void Dispose()
    {
        GameService.GameState.ActivePlayerDrawStarted -= OnActivePlayerDrawStarted;
        GameService.GameState.PlayerDrawStarted -= OnPlayerDrawStarted;

    }

    private void OnPlayerDrawStarted(object? sender, PlayerDrawEventArgs _)
    {
        toolsVisible = false;
        StateHasChanged();
    }

    private void OnActivePlayerDrawStarted(object? sender, EventArgs _)
    {
        toolsVisible = true;
        StateHasChanged();
    }
}
