@page "/lobby"
@implements IDisposable
@inject IGameService GameService
@inject NavigationManager NavigationManager

<div class="horizontal">
    <div class="roomlist">
        <p class="title center"><button class="newroombutton" @onclick="ShowCreateRoomDialog">Create a new room</button></p>
        <p class="title">Waiting for players</p>
        <ul>
            @foreach (RoomStateDTO room in GameService.Rooms.Where(r => !r.GameInProgress))
            {
                <li @onclick="() => SelectRoom(room)">
                    <RoomListItem Room="room" />
                </li>
            }
        </ul>
        <p class="title">In Progress</p>
        <ul>
            @foreach (RoomStateDTO room in GameService.Rooms.Where(r => r.GameInProgress))
            {
                <li @onclick="() => SelectRoom(room)">
                    <RoomListItem Room="room" />
                </li>
            }
        </ul>

    </div>
    <div class="roomdata">
        @if (showCreateRoomDialog)
        {
            <RoomCreator />
        }
        else if (selectedRoom != null)
        {
            <div class=vertical>
                <p class="roomname">@selectedRoom.RoomName</p>
                <RoomSettingsDisplay Settings="selectedRoom.RoomSettings" IsEditable="false" />
                @if (selectedRoom.RoomSettings.IsPrivateRoom)
                {
                    <input type="password" class="password-input @(joinFailed? "incorrect" : "")" placeholder="Password" @bind="@password"/>
                }
                <button disabled="@waitingForJoin" class="joinbutton" @onclick="() => JoinRoom(selectedRoom.RoomName, password)">Join</button>
            </div>
        }
    </div>
</div>

@code {
    private bool showCreateRoomDialog = false;
    private RoomStateDTO? selectedRoom = null;
    private string password = "";
    private bool waitingForJoin = false;
    private bool joinFailed = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (GameService.PlayerGuid == null)
        {
            NavigationManager.NavigateTo("/");
        }

        GameService.RoomListChanged += OnRoomListChanged;
        GameService.RoomSettingsChanged += OnRoomSettingsChanged;
    }

    public void Dispose()
    {
        GameService.RoomListChanged -= OnRoomListChanged;
        GameService.RoomSettingsChanged -= OnRoomSettingsChanged;
    }

    private void OnRoomListChanged(object? sender, EventArgs e)
    {
        StateHasChanged();
    }

    private void OnRoomSettingsChanged(object? sender, EventArgs e)
    {
        StateHasChanged();
    }

    private async Task JoinRoom(string roomName, string password)
    {
        waitingForJoin = true;
        StateHasChanged();
        joinFailed = !(await GameService.JoinRoom(roomName, password));
        waitingForJoin = false;
        StateHasChanged();
    }

    private void SelectRoom(RoomStateDTO room)
    {
        showCreateRoomDialog = false;
        selectedRoom = room;
    }

    private void ShowCreateRoomDialog()
    {
        showCreateRoomDialog = true;
    }
}
