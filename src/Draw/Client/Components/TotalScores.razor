@implements IDisposable
@inject IGameService GameService

@if (totalScoresVisible && totalScores != null)
{
    <div class="overlay">
        <h2>Final scores</h2>
        <table class="score-table">
            @{
                int i = 1;
                foreach (PlayerScore ts in totalScores)
		        {
                    <tr>
                        <td>#@(i++)</td>
                        <td class="name">@ts.Player.Name</td>
                        <td>@ts.Score</td>
                    </tr>
                }
            }
        </table>
        <Timeout Duration="@timeout" />
    </div>
}

@code {
    private bool totalScoresVisible = false;
    private List<PlayerScore>? totalScores = null;
    private int timeout = 0;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        GameService.GameScores += GameEnded;
    }

    public void Dispose()
    {
        GameService.GameScores -= GameEnded;
    }


    private void GameEnded(object? sender, (List<PlayerScore> scores, int timeout) args)
    {
        args.scores.Sort((s1, s2) => s2.Score.CompareTo(s1.Score));
        totalScores = args.scores;
        timeout = args.timeout;
        totalScoresVisible = true;
        StateHasChanged();
    }
}