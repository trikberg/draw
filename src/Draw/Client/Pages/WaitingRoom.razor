@page "/waitingroom"
@implements IDisposable
@inject IGameService GameService
@inject NavigationManager NavigationManager

<div class="vertical">
    <div class="top-bar">
        @if (GameService.RoomState != null &&
             GameService.RoomState.RoomSettings.IsPrivateRoom)
        {
            <span>Private room:&nbsp;</span>
        }
        else
        {
            <span>Public room:&nbsp;</span>
        }
        @GameService.RoomState?.RoomName
    </div>
    <div class="horizontal">
        <PlayerList ShowScore="@false"/>
        <div class="vertical center">
            <RoomSettingsDisplay IsEditable="@IsEditable()" 
                                 Settings="GameService.RoomState?.RoomSettings" 
                                 OnSettingsChanged="SettingsChangedHandler" />
            <button class="startbutton" @onclick="() => StartGame()" disabled="@(!IsEditable())">Start</button>
            <button class="startbutton" @onclick="() => LeaveRoom()">Leave Room</button>
        </div>
        <RoomChat IsChatMode="true" />
    </div>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (GameService.RoomState == null)
        {
            NavigationManager.NavigateTo("/");
        }

        GameService.GameStarted += GameStartedReceived;
        GameService.PlayerListChanged += OnPlayerListChanged;
        GameService.RoomSettingsChanged += OnRoomSettingsChanged;
    }

    public void Dispose()
    {
        GameService.GameStarted -= GameStartedReceived;
        GameService.PlayerListChanged -= OnPlayerListChanged;
        GameService.RoomSettingsChanged -= OnRoomSettingsChanged;
    }

    private async Task StartGame()
    {
        await GameService.StartGame();
    }

    private async Task LeaveRoom()
    {
        if (await GameService.LeaveRoom())
        {
            NavigationManager.NavigateTo("lobby");
        }
    }

    private void GameStartedReceived(object? sender, EventArgs e)
    {
        NavigationManager.NavigateTo("/room");
    }

    private bool IsEditable()
    {
        Player? firstPlayer = GameService.Players.FirstOrDefault();
        Guid? myGuid = GameService.PlayerGuid;
        if (myGuid.HasValue &&
            firstPlayer != null &&
            myGuid.Value.Equals(firstPlayer.Id))
        {
            return true;
        }
        return false;
    }

    private void OnPlayerListChanged(object? sender, EventArgs e)
    {
        StateHasChanged();
    }

    private void OnRoomSettingsChanged(object? sender, EventArgs e)
    {
        StateHasChanged();
    }

    private void SettingsChangedHandler(RoomSettings newSettings)
    {
        GameService.SetRoomSettings(newSettings);
    }
}
